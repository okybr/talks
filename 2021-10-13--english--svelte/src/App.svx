<script lang="ts">
  import SwiperCore, { EffectCards, Keyboard } from 'swiper';
  import { Swiper, SwiperSlide } from 'swiper/svelte';
  import 'swiper/css/bundle';

  SwiperCore.use([EffectCards, Keyboard]);

  let firstName, lastName;
  $: fullName = firstName + ' ' + lastName;
</script>

<Swiper effect='cards' keyboard={{ enabled: true }}>
<SwiperSlide>

# Svelte - A truely reactive web framework

A talk by Kemal at BR/SEP/WebTeam on 2021-10-13

</SwiperSlide>
<SwiperSlide>

# What is reactivity?

Reactivity means that functions interact with their inputs in real-time.

</SwiperSlide>
<SwiperSlide>

## Non-Reactive Code Example

```javascript
actor = 0;
reactor = actor;
actor = 1;

expect(actor).toBe(1);
expect(reactor).toBe(0);
```

</SwiperSlide>
<SwiperSlide>

## Reactive Code Example

```javascript
actor = 0;
reactor $= actor;
actor = 1;

expect(actor).toBe(1);
expect(reactor).toBe(1);
```

</SwiperSlide>
<SwiperSlide>

# React's Approach to Reactivity

- application structured in **components** with input parameters

- application has its own Virtual Document Object Model (**VDOM**)
beside the browsers DOM

- when an input parameter changes, then
  - the whole component is recalculated and
  - the VDOM and DOM are compared so that
  - the right elements in the DOM can be modified.

- React.js is reactive but the reactivity is very **expensive**

</SwiperSlide>
<SwiperSlide>

# Svelte's Approach to Reactivity

- Svelte a library and a Svelte-to-JavaScript transpiler

- Svelte syntax is
  - syntactically JavaScript but
  - semantically interpreted slightly differently

- Svelte code is often split into HTML-like tags,
  similar to Vue

</SwiperSlide>
<SwiperSlide>

## Labels and jumps in JavaScript

In JS, [labels](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label) are used to skip an iteration of a certain level of nested loops:

```javascript
firstLabel:
for (...) {

   secondLabel:
   for (...) {

      if (...) {
         continue firstLabel;
      }
   }
}
```

</SwiperSlide>
<SwiperSlide>

## Svelte's Reactive Label

In JS, `$` is a valid label-identifier.
In Svelte, it makes statements reactive.
It [means](https://svelte.dev/tutorial/reactive-declarations): *re-run this code whenever any of the referenced values change*.

```svelte
<script>
  let firstName, lastName;
  $: fullName = firstName + ' ' + lastName;
</script>

<input bind:value={firstName} placeholder="First name">
<input bind:value={lastName} placeholder="Last name">

<p>Hello {fullName}!</p>
```

</SwiperSlide>
<SwiperSlide>

## Hello {fullName}!

<input bind:value={firstName} placeholder="First name">
<input bind:value={lastName} placeholder="Last name">

</SwiperSlide>
<SwiperSlide>

## Svelte's Reactive Label

Make a whole code block reactive:

```javascript
$: {
  foo = bar;
  baz = qux;
}
```

</SwiperSlide>
<SwiperSlide>

## Looking behind the curtain

Easily use the [Svelte-REPL](https://svelte.dev/repl/c1c9ee888b0c4bb0a65d6040839d9382):

```javascript
$$self.$$.update = () => {
  if ($$self.$$.dirty & /*firstName, lastName*/ 3) {
    $: $$invalidate(2, fullName = firstName + ' ' + lastName);
  }
};
```

</SwiperSlide>
<SwiperSlide>

## Svelte Syntax for Component Properties

In Svelte, component input properties are declared using the JavaScript's `export` module syntax:

```svelte
<!-- This is Hello.svelte. -->
<script>
  export let name;
</script>

<p>Hello {name}!</p>
```

```svelte
<!-- This is another component. -->
<script>
  import Hello from './Hello.svelte';
</script>

<Hello name="from the other side"/>
```

</SwiperSlide>
<SwiperSlide>

## Yada yada yada

Svelte has all the other features you know from similar frameworks.
But now let's [dive into the code](https://yewtu.be/watch?v=dQw4w9WgXcQ)!

</SwiperSlide>
<SwiperSlide>

# Is it worth?

Let's compare the speed of React and Svelte (and Vue).

</SwiperSlide>
<SwiperSlide>

# Is it just about speed?

No, Svelte is not only about speed:

- efficient solutions for what React-hooks do:
  - reactivity (`$:` vs state-hook)
  - global state (*stores* vs react-effects)
- emphasize on accessibility
- nice feature for animations

</SwiperSlide>
<SwiperSlide>

# Looking forward ...

- ... to Svelte-Kit
  - routing framework for Svelte with SSR etc.
  - built on top of Vite

- ... to other projects improving the idea of reactive DOM modification.

</SwiperSlide>
<SwiperSlide>

# Fin

- Must-See: Rich Harris' (initiator of Svelte) lightning talk on Svelte

</SwiperSlide>
</Swiper>

<style lang="postcss">
  :global(*) {
    box-sizing: border-box;
  }

  :global(a) {
    color: inherit;
  }

  :global(body) {
    margin: 0px;
    font-size: 2rem;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
  }

  :global(h1, h2, h3, h4, h5, h6) {
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
  }

  :global(p > code) {
    font-size: 2.3rem;
  }

  :global(pre) {
    font-size: 1.8rem;
    padding: 1em;
    border-radius: 1em;
    background-color: rgba(255, 255, 255, 0.281);
    overflow-x: scroll;
  }

  :global(#app) {
    height: 100vh;
    width: 100vw;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  :global(.swiper) {
    height: 80%;
    width: 50%;
    color: white;
  }

  :global(.swiper-slide) {
    padding: 3rem;
    border-radius: 3rem;
  }

  :global(.swiper-slide > *:first-child) {
    margin-top: 0px;
  }

  :global(.swiper-slide:nth-child(8n+0)) { background-color: rgb(54, 94, 77); }
  :global(.swiper-slide:nth-child(8n+1)) { background-color: rgb(206, 17, 17); }
  :global(.swiper-slide:nth-child(8n+2)) { background-color: rgb(0, 140, 255); }
  :global(.swiper-slide:nth-child(8n+3)) { background-color: rgb(118, 163, 12); }
  :global(.swiper-slide:nth-child(8n+4)) { background-color: rgb(211, 122, 7); }
  :global(.swiper-slide:nth-child(8n+5)) { background-color: rgb(180, 10, 47); }
  :global(.swiper-slide:nth-child(8n+6)) { background-color: rgb(35, 99, 19); }
  :global(.swiper-slide:nth-child(8n+7)) { background-color: rgb(0, 68, 255); }
</style>
